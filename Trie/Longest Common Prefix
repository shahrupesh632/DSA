// Approach 1:
string longestCommonPrefix(vector<string> &arr, int n)
{
    // Write your code here
    string ans="";
    for(int i=0;i<arr[0].length();i++){
        // taking a single character
        char ch=arr[0][i];
        bool match=true;
        for(int j=1;j<arr.size();j++){
            // not match
            if(i<arr[j].size() && ch !=arr[j][i]){
                match=false;
                break;
            }
        }
        if(match){
            ans.push_back(ch);
        }
        else
        break;

    }
    return ans;
}


// Approach 2 using TRIE
class TrieNode{
    public:
    char data;
    TrieNode* children[26];
    int childCount;
    bool isTerminal;
    TrieNode(char ch){
        data=ch;
        for(int i=0;i<26;i++)
        children[i]=NULL;
        childCount=0;
        isTerminal=false;
    }
};
class Trie{
    public:
    TrieNode* root;
    Trie(char ch){
        root=new TrieNode(ch);
    }
    void insertUtil(TrieNode* &root,string word){
        if(word.length()==0){
            root->isTerminal=true;
            return;
        }
        int index=word[0]-'a';
        TrieNode* child;
        if(root->children[index]!=NULL){
            child=root->children[index];
        }
        else{
            child=new TrieNode(word[0]);
            root->childCount++;
            root->children[index]=child;
        }
        insertUtil(child,word.substr(1));
    }
    void insert(string word){
         insertUtil(root,word);
    }
    void lcp(string str,string &ans){
        
        for(int i=0;i<str.length();i++){
            char ch=str[i];
            if(root->childCount==1){
                ans.push_back(ch);
                int index=ch-'a';
                root=root->children[index];
            }
            else
            break;
            if(root->isTerminal)
            break;
        }
    }
};
string longestCommonPrefix(vector<string> &arr, int n)
{
    // Write your code here
    Trie* t=new Trie('\0');
    //insert  strings into trie
    for(int i=0;i<arr.size();i++)
       t->insert(arr[i]);
    string str=arr[0];
    string ans="";
    t->lcp(str,ans);
    return ans;

}


