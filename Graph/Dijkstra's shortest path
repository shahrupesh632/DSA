#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
    // creation of adjacency list
    unordered_map<int,list<pair<int,int>>>adj;
    for(int i=0;i<edges;i++){
        int u=vec[i][0];
        int v=vec[i][1];
        int w=vec[i][2];
        adj[u].push_back(make_pair(v,w));
        adj[v].push_back(make_pair(u,w));
    }
    
    //creation of distance array with infinite 
    vector<int>dist(vertices);
    for(int i=0;i<vertices;i++)
    dist[i]=INT_MAX;
    
    //initializing source node distance with 0
    dist[source]=0;

    //creating set of pair with distance and node
    set<pair<int,int>>s;
    
    //inserting source node to set
    s.insert(make_pair(0,source));
    
    while(!s.empty()){
    // fetching top node
        auto top=*(s.begin());
        s.erase(s.begin());
        int nodeDistance=top.first;
        int node=top.second;
        for(auto i:adj[node]){
            if(nodeDistance+i.second < dist[i.first]){
                auto record=s.find(make_pair(dist[i.first],i.first));
                if(record!=s.end())
                s.erase(record);
                dist[i.first]=nodeDistance+i.second;
                s.insert(make_pair(dist[i.first],i.first));
            }
        }
    }
    return dist;
}
