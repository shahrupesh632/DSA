#include<unordered_map>
#include<list>
#include<queue>
// using BFS
bool isCycleBFS(unordered_map<int,list<int>>&adj,unordered_map<int,bool>&visited,int src){
    unordered_map<int,int>parent;
    parent[src]=-1;
    queue<int>q;
    q.push(src);
    visited[src]=true;
    while(!q.empty()){
        int front=q.front();
        q.pop();
        for(auto neighbour:adj[front]){
            if(visited[neighbour]==true && neighbour !=parent[front]){
                return true;
            }
            else if(!visited[neighbour]){
                q.push(neighbour);
                visited[neighbour]=1;
                parent[neighbour]=front;
            }
        }
    }
    return false;
}
//using DFS
bool isCyclicDFS(int node,int parent,unordered_map<int,list<int>>&adj,
                 unordered_map<int,bool>&visited)
{
    visited[node]=true;
    for(auto i:adj[node]){
        if(!visited[i]){
            bool cycle= isCyclicDFS(i,node,adj,visited);
            if(cycle)
            return true;
        }
        else{
            if(i !=parent)
            return true;
        }
    }
    return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // creating adjacency list
    unordered_map<int,list<int>>adj;
    for(int i=0;i<edges.size();i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    unordered_map<int,bool>visited;
    for(int i=0;i<n;i++){
        if(!visited[i]){
            bool ans=isCycleBFS(adj,visited,i);
            if(ans)
            return "Yes";
        }
    }
    return "No";
}
