#include<unordered_map>
#include <list>
#include <stack>
void topoDFS(int node,unordered_map<int,bool>&visited,
			unordered_map<int,list<int>>&adj,stack<int>&st)
{
	visited[node]=true;
	for(auto nbr:adj[node]){
		if(!visited[nbr])
			topoDFS(nbr,visited,adj,st);
	}
	st.push(node);
}
void RevDFS(int node,unordered_map<int,list<int>>&transpose,
unordered_map<int,bool>&visited){
	visited[node]=true;
	for(auto nbr:transpose[node]){
		if(!visited[nbr])
			RevDFS(nbr, transpose, visited);
	}
}
int stronglyConnectedComponents(int v, vector<vector<int>> &edges)
{
	unordered_map<int,list<int>>adj;
	for(int i=0;i<edges.size();i++){
		int u=edges[i][0];
		int v=edges[i][1];
		adj[u].push_back(v);
	}
	//topological sort
	unordered_map<int,bool>visited;
	stack<int>st;
	for(int i=0;i<v;i++){
		if(!visited[i]){
			topoDFS(i,visited,adj,st);
		}
	}

	//transpose the graph
	unordered_map<int,list<int>>transpose;
	for(int i=0;i<v;i++){
		visited[i]=0;
		for(auto nbr:adj[i])
			transpose[nbr].push_back(i);
	}

	//DFS using topological ordering 
	int count =0;
	while(!st.empty()){
		int i=st.top();
		st.pop();
		if(!visited[i]){
			count++;
			RevDFS(i,transpose,visited);
		}
	}
	return count;
}
