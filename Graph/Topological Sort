// using kahn's algorithm
#include <bits/stdc++.h> 
vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    unordered_map<int,list<int>>adj;
    for(int i=0;i<e;i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
    }
    vector<int> indegree(v);
    for(auto i:adj){
        for(auto j:i.second){
            indegree[j]++;
        }
    }
    queue<int>q;
    for(int i=0;i<v;i++){
        if(indegree[i]==0)
          q.push(i);
    }
    vector<int> ans;
    while(!q.empty()){
         int front=q.front();
         q.pop();
         ans.push_back(front);
         for(auto neighbour:adj[front]){
             indegree[neighbour]--;
             if(indegree[neighbour]==0){
                 q.push(neighbour);
             }
         }
    }
    return ans;
}


//2.using DFS
#include <bits/stdc++.h> 
void dfs(int node,vector<bool>&visited,unordered_map<int,list<int>>&adj,
stack<int>&s)
{
    visited[node]=true;
    for(auto i:adj[node]){
        if(!visited[i]){
            dfs(i,visited,adj,s);
        }
    }
    s.push(node);
}
vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    unordered_map<int,list<int>>adj;
    for(int i=0;i<e;i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
    }
    vector<bool>visited(v);
    stack<int>s;
    for(int i=0;i<v;i++){
        if(!visited[i]){
            dfs(i,visited,adj,s);
        }
    }
    vector<int> ans;
    while(!s.empty()){
        ans.push_back(s.top());
        s.pop();
    }
    return ans;
}
