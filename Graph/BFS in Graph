#include <bits/stdc++.h> 
void prepareAdjList(vector<pair<int, int>> &edges,unordered_map<int,set<int>> &adjList)
{
    for(int i=0;i<edges.size();i++){
        int u=edges[i].first;
        int v=edges[i].second;
        adjList[u].insert(v);
        adjList[v].insert(u);
    }
}
void bfsTraversal(vector<int> &ans,unordered_map<int,set<int>> &adjList,unordered_map<int,bool> &visited,int Node){
    queue<int>q;
    q.push(Node);
    visited[Node]=1;
    while(!q.empty()){
        int frontNode=q.front();
        q.pop();
        ans.push_back(frontNode);
        for(auto i:adjList[frontNode]){
            if(!visited[i]){
                q.push(i);
                visited[i]=1;
            }
        }
    }
}
vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    vector<int> ans;
    unordered_map<int,set<int>> adjList;
    prepareAdjList(edges,adjList);
    unordered_map<int,bool> visited;
    for(int i=0;i<vertex;i++){
        if(!visited[i]){
            bfsTraversal(ans,adjList,visited,i);
        }
    }
    return ans;

}
