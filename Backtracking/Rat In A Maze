#include <bits/stdc++.h>
bool isSafe(int x,int y,vector < vector < int >> & arr,int n,
vector < vector < bool >> &visited){
    if((x>=0 && x<n)&&(y>=0 && y<n)&& (arr[x][y]==1)&& visited[x][y]==0)
    return true;
    else
    return false;
}
void solve(int x,int y,vector < vector < int >> & arr,int n,
vector < vector < bool >> &visited,vector<string> &ans,string path ){
     if(x==n-1 && y==n-1){
         ans.push_back(path);
     }
    //  Down
    visited[x][y]=1;
    if(isSafe(x+1,y,arr,n,visited)){
        solve(x+1,y,arr,n,visited,ans,path+'D');
    }
    // Left
    if(isSafe(x,y-1,arr,n,visited)){
        solve(x,y-1,arr,n,visited,ans,path+'L');
    }
    // Right
    if(isSafe(x,y+1,arr,n,visited)){
        solve(x,y+1,arr,n,visited,ans,path+'R');
    }
    if(isSafe(x-1,y,arr,n,visited)){
        solve(x-1,y,arr,n,visited,ans,path+'U');
    }
    visited[x][y]=0;
} 
vector < string > searchMaze(vector < vector < int >> & arr, int n) {
    vector<string> ans;
    vector < vector < bool >> visited(n,vector<bool>(n,0));
    if(arr[0][0]==0)
    return ans;
    string path="";
    solve(0,0,arr,n,visited,ans,path);
     return ans;
}
