class Solution {
public:
    int solve(vector<int> &obstacles,int lane,int pos){
        int n=obstacles.size();
        if(pos==n)
            return 0;
        if(obstacles[pos+1]!=lane)
            return solve(obstacles,lane,pos+1);
        else
            {
                int ans=INT_MAX;
                for(int i=1;i<=3;i++){
                    if(lane!=i && obstacles[pos]!=i)
                        ans=min(ans,1+solve(obstacles,i,pos));
                }
                return ans;
            }
    }
    int solveMem(vector<int> &obstacles,int lane,int pos,vector<vector<int>>&dp){
        int n=obstacles.size();
        if(pos==n-1)
            return 0;
        if(dp[lane][pos]!=-1)
            return dp[lane][pos];
        if(obstacles[pos+1]!=lane)
            return solveMem(obstacles,lane,pos+1,dp);
        else
            {
                int ans=INT_MAX;
                for(int i=1;i<=3;i++){
                    if(lane!=i && obstacles[pos]!=i)
                        ans=min(ans,1+solveMem(obstacles,i,pos,dp));
                }
                dp[lane][pos]=ans;
                return dp[lane][pos];
            }
    }
    int solveTab(vector<int>& obstacles){
        int n=obstacles.size();
        vector<vector<int>>dp(4,vector<int>(n,1e9));
        for(int i=0;i<=3;i++)
            dp[i][n-1]=0;
        for(int pos=n-2;pos>=0;pos--){
            for(int lane=1;lane<=3;lane++){
                if(obstacles[pos+1]!=lane)
                    dp[lane][pos]=dp[lane][pos+1];
                else
                {
                    int ans=1e9;
                    for(int i=1;i<=3;i++){
                        if(obstacles[pos]!=i && lane!=i)
                            ans=min(ans,1+dp[i][pos+1]);
                    }
                    dp[lane][pos]=ans;
                }
            }
        }
        return min(dp[2][0],min(1+dp[1][0],1+dp[3][0]));
    }
    int solveTabSO(vector<int>& obstacles){
        int n=obstacles.size();
        vector<int> curr(4,1e9);
        vector<int> next(4,1e9);
        for(int i=0;i<=3;i++)
        {
            next[i]=0;
        }
        for(int pos=n-2;pos>=0;pos--){
            for(int lane=1;lane<=3;lane++){
                if(obstacles[pos+1]!=lane)
                    curr[lane]=next[lane];
                else
                {
                    int ans=1e9;
                    for(int i=1;i<=3;i++){
                        if(obstacles[pos]!=i && lane!=i)
                            ans=min(ans,1+next[i]);
                    }
                    curr[lane]=ans;
                }
            }
            next=curr;
        }
        return min(next[2],min(1+next[1],1+next[3]));
    }
    int minSideJumps(vector<int>& obstacles) {
        // return solve(obstacles,2,0);
        // vector<vector<int>>dp(4,vector<int>(obstacles.size(),-1));
        // return solveMem(obstacles,2,0,dp);
        return solveTabSO(obstacles);
    }
};
