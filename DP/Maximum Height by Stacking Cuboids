class Solution {
public:
    // static bool comp(vector<int>&a,vector<int>&b){
    //     if(a[0]>b[0])
    //         return true;
    //     else
    //         return false;
    // }
    bool check(vector<int>&base,vector<int>&newbox){
        if(newbox[0]<=base[0] && newbox[1]<=base[1] && newbox[2]<=base[2])
            return true;
        else
            return false;
    }
    int solve(int n,vector<vector<int>>& a,int curr,int prev,vector<vector<int>>&dp){
        if(curr==n)
            return 0;
        if(dp[curr][prev+1]!=-1)
            return dp[curr][prev+1];
        int include=0;
        if(prev==-1 || check(a[curr],a[prev]))
            include=a[curr][2]+solve(n,a,curr+1,curr,dp);
        int exclude=solve(n,a,curr+1,prev,dp);
        return dp[curr][prev+1]=max(include,exclude);
    }
    int solveTab(int n,vector<vector<int>>& a){
        vector<vector<int>>dp(n+1,vector<int>(n+1,0));
        for(int curr=n-1;curr>=0;curr--){
            for(int prev=curr-1;prev>=-1;prev--){
                int include=0;
                if(prev==-1 || check(a[curr],a[prev]))
                    include=a[curr][2]+dp[curr+1][curr+1];
                int exclude=dp[curr+1][prev+1];
                dp[curr][prev+1]=max(include,exclude);
            }
        }
        return dp[0][0];
    }
    int solveTabSO(int n,vector<vector<int>>& a){
        // vector<vector<int>>dp(n+1,vector<int>(n+1,0));
        vector<int>currRow(n+1,0);
        vector<int>nextRow(n+1,0);
        for(int curr=n-1;curr>=0;curr--){
            for(int prev=curr-1;prev>=-1;prev--){
                int include=0;
                if(prev==-1 || check(a[curr],a[prev]))
                    include=a[curr][2]+nextRow[curr+1];
                int exclude=nextRow[prev+1];
                currRow[prev+1]=max(include,exclude);
            }
            nextRow=currRow;
        }
        return nextRow[0];
    }
    int maxHeight(vector<vector<int>>& cuboids) {
        for(auto &a:cuboids)
            sort(a.begin(),a.end());
        sort(cuboids.begin(),cuboids.end());
        int n=cuboids.size();
        // vector<vector<int>>dp(n,vector<int>(n+1,-1));
        // return solve(n,cuboids,0,-1,dp);
        return solveTabSO(n,cuboids);
    }
};
